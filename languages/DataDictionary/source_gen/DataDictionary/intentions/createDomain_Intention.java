package DataDictionary.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;

public final class createDomain_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public createDomain_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:6f6fcb1f-9d8a-4239-8c15-383d040645c0(DataDictionary.intentions)", "6459033731455848333"));
  }
  @Override
  public String getPresentation() {
    return "createDomain";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new createDomain_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Create Domain Definitions";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      {
        final SNode agg = node;
        if (SNodeOperations.isInstanceOf(agg, MetaAdapterFactory.getConcept(0xa7f45b2b89264555L, 0x82d3927859451525L, 0xdff9927af035b20L, "DataDictionary.structure.Aggregation"))) {
          SNode dd = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xa7f45b2b89264555L, 0x82d3927859451525L, 0x59a318f513b30c9dL, "DataDictionary.structure.DomainDefinition"));

          for (SNode field : SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xa7f45b2b89264555L, 0x82d3927859451525L, 0xdff9927af035b1aL, 0xdff9927af035b55L, "fields"))) {
            if (SNodeOperations.isInstanceOf(field, MetaAdapterFactory.getConcept(0xa7f45b2b89264555L, 0x82d3927859451525L, 0xdff9927af035b44L, "DataDictionary.structure.SimpleField"))) {
              SNode fieldDefinition = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xa7f45b2b89264555L, 0x82d3927859451525L, 0x59a318f513b30ca3L, "DataDictionary.structure.FieldDefinition"));
              SLinkOperations.setTarget(fieldDefinition, MetaAdapterFactory.getReferenceLink(0xa7f45b2b89264555L, 0x82d3927859451525L, 0x59a318f513b30ca3L, 0x59a318f513b30ca4L, "fieldReference"), field);
              ListSequence.fromList(SLinkOperations.getChildren(dd, MetaAdapterFactory.getContainmentLink(0xa7f45b2b89264555L, 0x82d3927859451525L, 0x59a318f513b30c9dL, 0x59a318f513b30cabL, "fieldDefinitions"))).addElement(fieldDefinition);
            }

          }
          SLinkOperations.setTarget(node, MetaAdapterFactory.getContainmentLink(0xa7f45b2b89264555L, 0x82d3927859451525L, 0xdff9927af035b1aL, 0x59a318f513b3ec25L, "domainDefinition"), dd);

        }
      }
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return createDomain_Intention.this;
    }
  }
}
