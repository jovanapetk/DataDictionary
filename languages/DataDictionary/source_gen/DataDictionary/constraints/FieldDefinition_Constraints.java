package DataDictionary.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.LinkedList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.scope.ListScope;
import jetbrains.mps.smodel.SNodePointer;

public class FieldDefinition_Constraints extends BaseConstraintsDescriptor {
  public FieldDefinition_Constraints() {
    super(MetaAdapterFactory.getConcept(0xa7f45b2b89264555L, 0x82d3927859451525L, 0x59a318f513b30ca3L, "DataDictionary.structure.FieldDefinition"));
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(MetaAdapterFactory.getReferenceLink(0xa7f45b2b89264555L, 0x82d3927859451525L, 0x59a318f513b30ca3L, 0x59a318f513b30ca4L, "fieldReference"), new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xa7f45b2b89264555L, 0x82d3927859451525L, 0x59a318f513b30ca3L, 0x59a318f513b30ca4L), this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_4qcb4i_a0a0a0a0a1a0b0a1a2;
          }
          @Override
          public Scope createScope(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            {
              List<SNode> possibleFields = ListSequence.fromList(new LinkedList<SNode>());
              for (SNode f1 : SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(_context.getReferenceNode(), MetaAdapterFactory.getInterfaceConcept(0xa7f45b2b89264555L, 0x82d3927859451525L, 0xdff9927af035b1aL, "DataDictionary.structure.Structure"), false, false), MetaAdapterFactory.getContainmentLink(0xa7f45b2b89264555L, 0x82d3927859451525L, 0xdff9927af035b1aL, 0xdff9927af035b55L, "fields"))) {
                ListSequence.fromList(possibleFields).addElement(f1);
              }

              // odavde 
              SNode newField = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xa7f45b2b89264555L, 0x82d3927859451525L, 0xdff9927af035b44L, "DataDictionary.structure.SimpleField"));
              SPropertyOperations.set(newField, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "unnamed");
              SNode fieldDefinition = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xa7f45b2b89264555L, 0x82d3927859451525L, 0x59a318f513b30ca3L, "DataDictionary.structure.FieldDefinition"));
              SLinkOperations.setTarget(fieldDefinition, MetaAdapterFactory.getReferenceLink(0xa7f45b2b89264555L, 0x82d3927859451525L, 0x59a318f513b30ca3L, 0x59a318f513b30ca4L, "fieldReference"), newField);
              // do ovde 
              return new ListScope(possibleFields) {
                public String getName(SNode child) {
                  return SPropertyOperations.getString(child, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
                }
              };
            }
          }
        };
      }
    });
    return references;
  }
  private static SNodePointer breakingNode_4qcb4i_a0a0a0a0a1a0b0a1a2 = new SNodePointer("r:b085b190-46f0-49ff-8f55-42b7532e2fe5(DataDictionary.constraints)", "8555703664415934012");
}
