package DataDictionary.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Aggregation;
  private ConceptPresentation props_ComplexExclusiveSpecialization;
  private ConceptPresentation props_ComplexSet;
  private ConceptPresentation props_Dictionary;
  private ConceptPresentation props_DomainDefinition;
  private ConceptPresentation props_ExclusiveSpecialization;
  private ConceptPresentation props_Field;
  private ConceptPresentation props_FieldDefinition;
  private ConceptPresentation props_FieldReference;
  private ConceptPresentation props_NonExclusiveSpecialization;
  private ConceptPresentation props_ReferenceField;
  private ConceptPresentation props_Set;
  private ConceptPresentation props_SimpleField;
  private ConceptPresentation props_SimpleStructure;
  private ConceptPresentation props_Structure;
  private ConceptPresentation props_StructureField1;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Aggregation:
        if (props_Aggregation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Aggregation = cpb.create();
        }
        return props_Aggregation;
      case LanguageConceptSwitch.ComplexExclusiveSpecialization:
        if (props_ComplexExclusiveSpecialization == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ComplexExclusiveSpecialization = cpb.create();
        }
        return props_ComplexExclusiveSpecialization;
      case LanguageConceptSwitch.ComplexSet:
        if (props_ComplexSet == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ComplexSet = cpb.create();
        }
        return props_ComplexSet;
      case LanguageConceptSwitch.Dictionary:
        if (props_Dictionary == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Dictionary for the system of :");
          cpb.presentationByName();
          props_Dictionary = cpb.create();
        }
        return props_Dictionary;
      case LanguageConceptSwitch.DomainDefinition:
        if (props_DomainDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DomainDefinition");
          props_DomainDefinition = cpb.create();
        }
        return props_DomainDefinition;
      case LanguageConceptSwitch.ExclusiveSpecialization:
        if (props_ExclusiveSpecialization == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ExclusiveSpecialization = cpb.create();
        }
        return props_ExclusiveSpecialization;
      case LanguageConceptSwitch.Field:
        if (props_Field == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Field = cpb.create();
        }
        return props_Field;
      case LanguageConceptSwitch.FieldDefinition:
        if (props_FieldDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FieldDefinition");
          props_FieldDefinition = cpb.create();
        }
        return props_FieldDefinition;
      case LanguageConceptSwitch.FieldReference:
        if (props_FieldReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FieldReference");
          props_FieldReference = cpb.create();
        }
        return props_FieldReference;
      case LanguageConceptSwitch.NonExclusiveSpecialization:
        if (props_NonExclusiveSpecialization == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_NonExclusiveSpecialization = cpb.create();
        }
        return props_NonExclusiveSpecialization;
      case LanguageConceptSwitch.ReferenceField:
        if (props_ReferenceField == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xa7f45b2b89264555L, 0x82d3927859451525L, 0xdff9927af035b4aL, 0xdff9927af035b5fL, "reference", "", "");
          props_ReferenceField = cpb.create();
        }
        return props_ReferenceField;
      case LanguageConceptSwitch.Set:
        if (props_Set == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Set = cpb.create();
        }
        return props_Set;
      case LanguageConceptSwitch.SimpleField:
        if (props_SimpleField == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SimpleField = cpb.create();
        }
        return props_SimpleField;
      case LanguageConceptSwitch.SimpleStructure:
        if (props_SimpleStructure == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SimpleStructure = cpb.create();
        }
        return props_SimpleStructure;
      case LanguageConceptSwitch.Structure:
        if (props_Structure == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Structure = cpb.create();
        }
        return props_Structure;
      case LanguageConceptSwitch.StructureField1:
        if (props_StructureField1 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_StructureField1 = cpb.create();
        }
        return props_StructureField1;
    }
    return null;
  }
}
